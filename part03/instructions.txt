========== Part 3 ============================================================

Take a moment to examine the RandomHelper class that has been provided to you.
It contains the following fields and methods that will be useful to you:

- SIZE - used to validate the size of a unique list (see below).

- nextInt() - returns a random integer from 1 to 1000000 (inclusive).

- assertList(List<?> list) - asserts that the list contains the correct number 
  of unique elements. The "?" indicates that you can call this method with a
  list containing any kind of elements (e.g. List<Integer>, List<String>, 
  List<Pokemon>, etc.). The assertions will fail if 1.) the list contains a 
  number of elements not equal to SIZE, or 2.) the list contains the same value
  more than once.

Create a new Java class named "RandomList" and use your preferred method to 
make it a thread. Add a field for an id and a list of integers and an 
initializing constructor. When started, your thread should use the fields and 
methods in the RandomHelper class to add the correct number of unique integer 
values to the list. Hint: The list.contains(int value) method will return true 
if the value is already in the list.

DO NOT use any data structure other than a List. If you do, your score for this
problem will be severely impacted.

Define a main method with the appropriate signature and use it to create and
start one of your threads. After the thread is finished, use the 
RandomHelper.assertList(List<?> list) method to verify that the list contains 
the correct number of unique elements and print a message. Here is example 
output for one thread:


1: beginning to add values...
1: finished!
The list is correct!


Once you are satisfied that your thread is working (i.e. the 
assertList(List<?> list) method is not failing), modify the main method to 
create and start 25 of your threads. You must guarantee that the main method 
will wait until all of the threads are completely finished before asserting
that the list is correct - you may use your preferred mechanism for doing this.
Run your class several times and make sure that it works every single time.

Hint: the list is a critical resource! You must make sure that your threads use
it safely.

To receive full credit you MUST guarantee that the threads run concurrently (
NOT sequentially). 

Here is an example of output for 25 threads (notice that the output from the
threads is interleaved and not concurrent).
 
2: beginning to add values...
9: beginning to add values...
4: beginning to add values...
7: beginning to add values...
8: beginning to add values...
3: beginning to add values...
18: beginning to add values...
16: beginning to add values...
1: beginning to add values...
14: beginning to add values...
22: beginning to add values...
13: beginning to add values...
15: beginning to add values...
17: beginning to add values...
20: beginning to add values...
5: beginning to add values...
12: beginning to add values...
11: beginning to add values...
10: beginning to add values...
25: beginning to add values...
19: beginning to add values...
24: beginning to add values...
23: beginning to add values...
21: beginning to add values...
6: beginning to add values...
23: finished!
9: finished!
13: finished!
17: finished!
20: finished!
4: finished!
12: finished!
22: finished!
10: finished!
14: finished!
16: finished!
5: finished!
18: finished!
19: finished!
7: finished!
21: finished!
11: finished!
1: finished!
2: finished!
25: finished!
15: finished!
24: finished!
8: finished!
3: finished!
6: finished!
The list is correct!
